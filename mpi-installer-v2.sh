#!/bin/bash

clear

config_file="/etc/mpi-config.conf"
head_ip=$( ip route get 8.8.8.8 | awk -F"src " 'NR==1{split($2,a," ");print a[1]}' )

# Checks if program is running as root
if [ "$EUID" -ne 0 ]; then
    echo "Please run this program as root"
    exit
fi

function set_config(){
    sudo sed -i "s/^\($1\s*=\s*\).*\$/\1$2/" $config_file
    source "$config_file"
    
}

join_array() {
    local IFS="$1"
    shift
    echo "$*"
}

# Generates an empty config file to /etc/mpi-config,
# removes and regenerates if it is run with the
# regenerate parameter
generate_config() {
    
    if [ "$1" == "regenerate" ]; then
        sudo rm $config_file
    fi
    
    sudo touch $config_file
    
    sudo echo "cluster_name=''"  >> $config_file
    sudo echo "cluster_size=" >> $config_file
    sudo echo "node_names=" >> $config_file
    sudo echo "node_ips=()" >> $config_file
    sudo echo "changed_hosts=0" >> $config_file
    sudo echo "mpi_username=''" >> $config_file
    sudo echo "nfs_set=0" >> $config_file
    sudo echo "ssh_set=0" >> $config_file
    sudo echo "mpi_distribution=''" >> $config_file
    sudo echo "mpi_set=0" >> $config_file
    sudo echo "setup_complete=false" >> $config_file
    sudo echo "setup_working=0" >> $config_file
    
    sleep 0.5
    
    echo -e "Empty config file generated! \n"
    
}

# Checks if a config file has been generated by program,
# if not it generates an empty one to /etc/mpi-config.conf
if [ ! -f "$config_file" ]; then
    echo "Generating empty config file..."
    generate_config
fi

# Source the config file
source "$config_file"

echo -e "Welcome to Pleiades MPI installer version 0.2! \n"

# User inputs name for cluster
read -p "Enter a name for your cluster: " name
set_config cluster_name $name

DONE=false

cluster_names=()
cluster_ips=()

# Main setup loop
while [ "$DONE" = false ] && [ "$setup_complete" = false ]; do
    
    read -p "How many nodes would you like to connect?: " number_of_nodes
    echo
    
    re='^[0-9]+$'
    
    while [ -z $number_of_nodes ] || [[ ! $number_of_nodes =~ $re ]]; do
        
        echo "Error cannot be empty"
        read -p "How many nodes would you like to connect?: " number_of_nodes
        
    done
    
    # Sets config file variable
    set_config cluster_size $number_of_nodes
    source "$config_file"
    # echo $cluster_size
    
    
    # IP address user input loop, only as many as the user specified
    for ((i=1; i<=$number_of_nodes; i++))
    do
        # The first iteration must be the head node or localhost
        if [ $i -eq 1 ]; then
            
            while [ -z $head_ip ]
            do
                echo "Fatal error. Head node has no IP"
                exit 1
            done
            
            cluster_names+=($HOSTNAME)
            cluster_ips+=($head_ip)
            
        fi
        
        # User inputs node name
        read -p "Enter the name that will be associated to your node, no spaces: " slave_name
        while [ -z "$slave_name" ]; do
            echo "Error cannot be empty"
            read -p "Enter the identification that will be associated to your node: " slave_name
        done
        
        while [[ "$slave_name" =~ " " ]]; do
            echo "Error cannot have spaces"
            read -p "Enter the identification that will be associated to your node: " slave_name
        done
        
        
        # The next iterations must be the nodes that will connect to the localhost
        read -p "Enter the IP of your slave node number $i: " slave_ip
        
        while [ -z "$slave_ip" ]; do
            echo "Error cannot be empty"
            read -p "Enter the IP of your slave node number $i: " slave_ip
        done
        echo "Pinging..."
        ping -c1 $slave_ip 1>/dev/null 2>/dev/null
        SUCCESS=$?
        
        while [ $SUCCESS -ne 0 ]
        do
            
            echo "Ping from $IP was not successful, please try again"
            read -p "Enter the IP of your slave node number $i: " slave_ip
            
            ping -c1 $slave_ip 1>/dev/null 2>/dev/null
            SUCCESS=$?
            
        done
        
        echo "Ping from $slave_ip successful!"
        echo
        
        cluster_ips+=($slave_ip)
        cluster_names+=($slave_name)
        
    done
    
    node_names_string=$(join_array  ,"${cluster_names[@]}")
    set_config node_names $node_names_string
    # echo $node_names    
    
    
    # Generates a hosts file
    hosts_file="hosts"
    touch $hosts_file
    
    echo -e "127.0.0.1 \t localhost" >> $hosts_file
    
    for index in ${!cluster_names[*]}; do
        echo -e "${cluster_ips[$index]} \t ${cluster_names[$index]}" >> $hosts_file
    done
    
    echo -e "\n# The following lines are desirable for IPv6 capable hosts " >> $hosts_file
    echo "::1     ip6-localhost ip6-loopback" >> $hosts_file
    echo "fe00::0 ip6-localnet" >> $hosts_file
    echo "ff00::0 ip6-mcastprefix" >> $hosts_file
    echo "ff02::1 ip6-allnodes" >> $hosts_file
    echo "ff02::2 ip6-allrouters" >> $hosts_file
    
    # Creates a backup folder for the user's old hosts file
    if [ ! -d "./backup" ]; then    
        mkdir backup
    fi

    rm ./backup/hosts
    sudo mv /etc/hosts ./backup/hosts
    sudo mv $hosts_file /etc/
    
    echo -e "/etc/hosts file generated and updated! A backup was copied to the backup folder \n"
    
    set_config changed_hosts 1
    
    sudo cp $config_file ./backup/
    cat /etc/hosts
    echo
    cat $config_file
    echo
    echo "Script terminated"

    exit 0
    
    
done